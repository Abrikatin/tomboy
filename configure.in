AC_INIT(Tomboy/Tomboy.cs)
AM_INIT_AUTOMAKE(tomboy, 0.3.10)
AM_MAINTAINER_MODE

GNOME_COMMON_INIT
GNOME_DOC_INIT

AM_CONFIG_HEADER(config.h)

AC_PROG_INSTALL
AC_PROG_INTLTOOL([0.25])
AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

#
# Setup GETTEXT
#

ALL_LINGUAS="bg bn bn_IN ca cs da de dz el en_CA en_GB es eu fi fr gl gu hi hu is it ja ko ku lt lv mk ml nb ne nl or pa pl pt pt_BR ro ru rw sq sr sr@Latn sv ta th tr uk vi zh_CN zh_HK zh_TW"

GETTEXT_PACKAGE=tomboy
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

#
# Find gconftool-2
#
AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

#
# Find mcs
#
AC_PATH_PROG(MCS, mcs)
if test "x$MCS" = "x" ; then
	AC_MSG_ERROR([Can't find "mcs" in your PATH])
fi

#
# Gdk and Atk are needed for libtrayicon
#
GDK20_MINIMUM_VERSION=2.2.3
GTK20_MINIMUM_VERSION=2.2.3
ATK_MINIMUM_VERSION=1.2.4

PKG_CHECK_MODULES(LIBTOMBOY, 
		  libgnomeprint-2.2
		  libgnomeprintui-2.2
		  gdk-2.0 >= $GDK20_MINIMUM_VERSION
		  gtk+-2.0 >= $GTK20_MINIMUM_VERSION
		  atk >= $ATK_MINIMUM_VERSION)
AC_SUBST(LIBTOMBOY_CFLAGS)
AC_SUBST(LIBTOMBOY_LIBS)

#
# Need Gtk 2.6+ for gdk_x11_window_set_user_time() to get around 
# anti-focus avoidance for keybindings.
#
PKG_CHECK_MODULES(GTK, gtk+-2.0 >= 2.6.0, GTK_2_6="yes", GTK_2_6="no")
if test "x$GTK_2_6" = "xyes"; then
   AC_DEFINE(HAVE_GDK_X11_WINDOW_SET_USER_TIME, 1, 
             [Whether GTK+ method gdk_x11_window_set_user_time() is present.])
fi

#
# If libpanelapplet available, use it to find .server install location.
#
if test "x$prefix" = "x$ac_default_prefix"; then
   PANELAPPLET_LIBDIR=`$PKG_CONFIG --variable=libdir libpanelapplet-2.0`
fi
if test "x$PANELAPPLET_LIBDIR" = "x"; then
   PANELAPPLET_SERVER_DIR="$libdir/bonobo/servers"
else
   PANELAPPLET_SERVER_DIR="$PANELAPPLET_LIBDIR/bonobo/servers"
fi
AC_SUBST(PANELAPPLET_SERVER_DIR)

#
# Check for GtkSpell here, as we call into it from C#.
# http://gtkspell.sourceforge.net/
#
PKG_CHECK_MODULES(GTKSPELL, gtkspell-2.0)
PKG_CHECK_MODULES(GTKSPELL, gtkspell-2.0 >= 2.0.9, FIXED_GTKSPELL="yes", FIXED_GTKSPELL="no")
AM_CONDITIONAL(FIXED_GTKSPELL, test "$FIXED_GTKSPELL" = "yes")

#
# Use DBus to export our remote control if available.
#
PKG_CHECK_MODULES(DBUS, 
		  dbus-1
		  dbus-glib-1,
		  ENABLE_DBUS="yes", ENABLE_DBUS="no")
AC_ARG_ENABLE(dbus, 
	      [  --enable-dbus[[=no/yes]]    compile with dbus support [[default: yes]]],
	      ENABLE_DBUS="$enableval")
AM_CONDITIONAL(ENABLE_DBUS, test "$ENABLE_DBUS" = "yes")

# DBus devel detect .so version for dll maps
PKG_CHECK_MODULES(DBUS90, dbus-1 >= 0.90, dbus90=yes, dbus90=no)
if test "x$dbus90" = "xyes"; then
	DBUS_SOVERSION=3
else
	DBUS_SOVERSION=2
fi
AC_SUBST(DBUS_SOVERSION)

#
# Tomboy.exe needs Gtk# Gnome# GConf#
#
PKG_CHECK_MODULES(TOMBOY, gtk-sharp-2.0 gnome-sharp-2.0 gconf-sharp-2.0)
AC_SUBST(TOMBOY_LIBS)

#
# Evolution.dll needs Gmime#
#
PKG_CHECK_MODULES(EVOLUTION, gmime-sharp, ENABLE_EVOLUTION="yes", ENABLE_EVOLUTION="no")
AC_ARG_ENABLE(evolution, 
	      [  --enable-evolution[[=no/yes]]  compile evolution plugin [[default: yes]]],
	      ENABLE_EVOLUTION="$enableval")
AM_CONDITIONAL(ENABLE_EVOLUTION, test "$ENABLE_EVOLUTION" = "yes")
AC_SUBST(EVOLUTION_LIBS)

#
# GalagoPresence.dll needs Galago#
#
PKG_CHECK_MODULES(GALAGO, galago-sharp >= 0.5.0, ENABLE_GALAGO="yes", ENABLE_GALAGO="no")
AC_ARG_ENABLE(galago, 
	      [  --enable-galago[[=no/yes]]  compile galago plugin [[default: yes]]],
	      ENABLE_GALAGO="$enableval")
AM_CONDITIONAL(ENABLE_GALAGO, test "$ENABLE_GALAGO" = "yes")
AC_SUBST(GALAGO_LIBS)

#
# NUnit required for (optional) unit tests
#
PKG_CHECK_MODULES(NUNIT, nunit, HAVE_NUNIT="yes", HAVE_NUNIT="no")
AM_CONDITIONAL(HAVE_NUNIT, test "$HAVE_NUNIT" = "yes")
AC_SUBST(NUNIT_LIBS)
AC_PATH_PROG(NUNIT, nunit-console)

#
# Properly handle libraries that aren't in our standard GAC path.
#
###DBUS_PREFIX=`$PKG_CONFIG --variable=prefix dbus-sharp`
###EXTRA_GAC_PREFIX="$DBUS_PREFIX"
###AC_SUBST(EXTRA_GAC_PREFIX)


AC_OUTPUT([
Makefile
tomboy.spec
data/Makefile
data/tomboy-plugins.pc
data/images/Makefile
help/Makefile
libtomboy/Makefile
Tomboy/Makefile
Tomboy/Plugins/Makefile
test/Makefile
po/Makefile.in
])
