AC_INIT(Tomboy/Tomboy.cs)
AM_INIT_AUTOMAKE(tomboy, 0.6.3)
AM_MAINTAINER_MODE

GNOME_COMMON_INIT
GNOME_DOC_INIT

AM_CONFIG_HEADER(config.h)

AC_PROG_INSTALL
AC_PROG_INTLTOOL([0.25])
AC_PROG_CC
AC_ISC_POSIX
AC_HEADER_STDC

AM_DISABLE_STATIC
AM_PROG_LIBTOOL

#
# Setup GETTEXT
#

ALL_LINGUAS="ar be bg bn bn_IN ca cs da de dz el en_CA en_GB es et eu fi fr he gl gu hi hu id is it ja ko ku lt lv mk ml nb ne nl or pa pl pt pt_BR ro ru rw sl sq sr sr@Latn sv ta th tr uk vi zh_CN zh_HK zh_TW"

GETTEXT_PACKAGE=tomboy
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT

#
# Find gconftool-2
#
AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

#
# Find mcs
#
AC_PATH_PROG(GMCS, gmcs)
if test "x$GMCS" = "x" ; then
	AC_MSG_ERROR([Can't find "gmcs" in your PATH])
fi

#
# Gdk and Atk are needed for libtrayicon
#
GDK20_MINIMUM_VERSION=2.6.0
GTK20_MINIMUM_VERSION=2.6.0
ATK_MINIMUM_VERSION=1.2.4

PKG_CHECK_MODULES(LIBTOMBOY, 
		  libgnomeprint-2.2
		  libgnomeprintui-2.2
		  gdk-2.0 >= $GDK20_MINIMUM_VERSION
		  gtk+-2.0 >= $GTK20_MINIMUM_VERSION
		  atk >= $ATK_MINIMUM_VERSION)
AC_SUBST(LIBTOMBOY_CFLAGS)
AC_SUBST(LIBTOMBOY_LIBS)

#
# Use pkg-config to check for the panel applet server directory if
# specified by --enable-panelapplet-srvdir-check.
#
AC_ARG_ENABLE(panelapplet-srvdir-check,
	      [  --enable-panelapplet-srvdir-check[[=no/yes]]    query for panel applet server dir [[default: yes]]],
	      [case "$enableval" in
	      	yes) ENABLE_PANELAPPLET_SRVDIR_CHECK=yes ;;
	      	no)  ENABLE_PANELAPPLET_SRVDIR_CHECK=no ;;
	      	*)   AC_MSG_ERROR(bad value ${enableval} for --enable-panelapplet-srvdir-check) ;;
	      esac],
	      [ENABLE_PANELAPPLET_SRVDIR_CHECK=yes])
AM_CONDITIONAL(ENABLE_PANELAPPLET_SRVDIR_CHECK, test "$ENABLE_PANELAPPLET_SRVDIR_CHECK" = "yes")

if test "$ENABLE_PANELAPPLET_SRVDIR_CHECK" = "yes" ; then
#
# If libpanelapplet available, use it to find .server install location.
#
if test "x$prefix" = "x$ac_default_prefix"; then
   PANELAPPLET_LIBDIR=`$PKG_CONFIG --variable=libdir libpanelapplet-2.0`
fi
if test "x$PANELAPPLET_LIBDIR" != "x"; then
   PANELAPPLET_SERVER_DIR="$PANELAPPLET_LIBDIR/bonobo/servers"
fi
fi
# Set PANELAPPLET_SERVER_DIR default if it's not already set
if test "x$PANELAPPLET_SERVER_DIR" = "x" ; then
	PANELAPPLET_SERVER_DIR="$libdir/bonobo/servers"
fi
AC_SUBST(PANELAPPLET_SERVER_DIR)

#
# Check for recent GtkSpell here.  Prior versions require bug workarounds.
# http://gtkspell.sourceforge.net/
#
PKG_CHECK_MODULES(GTKSPELL, gtkspell-2.0 >= 2.0.9, FIXED_GTKSPELL="yes", FIXED_GTKSPELL="no")
AM_CONDITIONAL(FIXED_GTKSPELL, test "$FIXED_GTKSPELL" = "yes")

#
# Use DBus to export our remote control if available.
#
AC_ARG_ENABLE(dbus, 
	      [  --enable-dbus[[=no/yes]]    compile with dbus support [[default: yes]]],
	      ENABLE_DBUS="$enableval")
AM_CONDITIONAL(ENABLE_DBUS, test "x$ENABLE_DBUS" != "xno")

#
# Use pkg-config to check for the DBus Service directory if specified by
# --enable-dbus-service-dir-check.
#
AC_ARG_ENABLE(dbus-service-dir-check,
	      [  --enable-dbus-service-dir-check[[=no/yes]]    query for service directory [[default: yes]]],
	      [case "$enableval" in
	      	yes) ENABLE_DBUS_SERVICE_DIR_CHECK=yes ;;
	      	no)  ENABLE_DBUS_SERVICE_DIR_CHECK=no ;;
	      	*)   AC_MSG_ERROR(bad value ${enableval} for --enable-dbus-service-dir-check) ;;
	      esac],
	      [ENABLE_DBUS_SERVICE_DIR_CHECK=yes])
AM_CONDITIONAL(ENABLE_DBUS_SERVICE_DIR_CHECK, test "$ENABLE_DBUS_SERVICE_DIR_CHECK" = "yes")

if test "$ENABLE_DBUS_SERVICE_DIR_CHECK" = "yes" ; then
DBUS_SERVICE_DIR_TEST=`$PKG_CONFIG --variable=session_bus_services_dir dbus-1`
if test "x$DBUS_SERVICE_DIR_TEST" != "x" ; then
	DBUS_SERVICE_DIR=$DBUS_SERVICE_DIR_TEST
fi
fi
# Set DBUS_SERVICE_DIR if it's not already set
if test "x$DBUS_SERVICE_DIR" = "x" ; then
	DBUS_SERVICE_DIR=$datadir/dbus-1/services
fi
AC_SUBST(DBUS_SERVICE_DIR)

#
# Check for external NDesk DBus
#
DBUS_LIBS=
if test "x$ENABLE_DBUS" != "xno" ; then
	PKG_CHECK_MODULES(DBUS, ndesk-dbus-1.0 >= 0.4 \
		ndesk-dbus-glib-1.0 >= 0.3, have_external_dbus="yes", have_external_dbus="no")
	if test "x$have_external_dbus" != "xyes"; then
		AC_MSG_RESULT([using internal copy])
	fi
fi
AM_CONDITIONAL(EXTERNAL_DBUS, test "x$have_external_dbus" = "xyes")
AC_SUBST(DBUS_LIBS)

#
# Tomboy.exe needs Gtk# Gnome# GConf#
#
GTKSHARP2_MINIMUM_VERSION=$GTK20_MINIMUM_VERSION
PKG_CHECK_MODULES(TOMBOY, gtk-sharp-2.0 >= $GTKSHARP2_MINIMUM_VERSION gnome-sharp-2.0 gconf-sharp-2.0)
AC_SUBST(TOMBOY_LIBS)

#
# Evolution.dll needs Gmime#
#
PKG_CHECK_MODULES(EVOLUTION, gmime-sharp, ENABLE_EVOLUTION="yes", ENABLE_EVOLUTION="no")
AC_ARG_ENABLE(evolution, 
	      [  --enable-evolution[[=no/yes]]  compile evolution plugin [[default: yes]]],
	      ENABLE_EVOLUTION="$enableval")
AM_CONDITIONAL(ENABLE_EVOLUTION, test "$ENABLE_EVOLUTION" = "yes")
AC_SUBST(EVOLUTION_LIBS)

#
# GalagoPresence.dll needs Galago#
#
PKG_CHECK_MODULES(GALAGO, galago-sharp >= 0.5.0, ENABLE_GALAGO="yes", ENABLE_GALAGO="no")
AC_ARG_ENABLE(galago, 
	      [  --enable-galago[[=no/yes]]  compile galago plugin [[default: yes]]],
	      ENABLE_GALAGO="$enableval")
AM_CONDITIONAL(ENABLE_GALAGO, test "$ENABLE_GALAGO" = "yes")
AC_SUBST(GALAGO_LIBS)

#
# NUnit required for (optional) unit tests
#
PKG_CHECK_MODULES(NUNIT, nunit, HAVE_NUNIT="yes", HAVE_NUNIT="no")
AM_CONDITIONAL(HAVE_NUNIT, test "$HAVE_NUNIT" = "yes")
AC_SUBST(NUNIT_LIBS)
AC_PATH_PROG(NUNIT, nunit-console)

#
# Replace xgettext by our PluginInfo aware wrapper script
#
XGETTEXT_XCOMMENT=`echo 'Test("1")' |\
       xgettext -L C\# -k'Test:1,"XCOMMENT"' -o- - |\
       grep XCOMMENT`

# Test to see if comments are supported in xgettext
# (known to work in 0.15 but not in 0.14.5)
if test "x#. XCOMMENT" = "x${XGETTEXT_XCOMMENT}"; then
       XGETTEXT_PLUGIN_NAME=',"Plugin Name"'
       XGETTEXT_PLUGIN_DESC=',"Plugin Description"'
else
       XGETTEXT_PLUGIN_NAME=
       XGETTEXT_PLUGIN_DESC=
fi

AC_SUBST(XGETTEXT_PLUGIN_NAME)
AC_SUBST(XGETTEXT_PLUGIN_DESC)

INTLTOOL_UPDATE="XGETTEXT=\$(top_builddir)/pot-update $INTLTOOL_UPDATE"
AC_CONFIG_FILES([pot-update], [chmod +x pot-update])

AC_OUTPUT([
Makefile
tomboy.spec
data/Makefile
data/tomboy-plugins.pc
data/images/Makefile
help/Makefile
libtomboy/Makefile
Tomboy/Makefile
Tomboy/Plugins/Makefile
test/Makefile
po/Makefile.in
])
