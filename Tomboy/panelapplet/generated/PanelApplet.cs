// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PanelApplet {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public abstract class PanelApplet : Gtk.EventBox {

		~PanelApplet()
		{
			Dispose();
		}

		protected PanelApplet(GLib.GType gtype) : base(gtype) {}
		public PanelApplet(IntPtr raw) : base(raw) {}

		[DllImport("panel-applet-2")]
		static extern IntPtr panel_applet_new();

		public PanelApplet () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PanelApplet)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = panel_applet_new();
		}

		delegate void ChangeBackgroundDelegate (IntPtr applet, int type, ref Gdk.Color color, IntPtr pixmap);

		static ChangeBackgroundDelegate ChangeBackgroundCallback;

		static void changebackground_cb (IntPtr applet, int type, ref Gdk.Color color, IntPtr pixmap)
		{
			PanelApplet obj = GLib.Object.GetObject (applet, false) as PanelApplet;
			obj.OnChangeBackground ((BackgroundType)type, color, (Gdk.Pixmap) GLib.Object.GetObject(pixmap));
		}

		private static void OverrideChangeBackground (GLib.GType gtype)
		{
			if (ChangeBackgroundCallback == null)
				ChangeBackgroundCallback = new ChangeBackgroundDelegate (changebackground_cb);
			OverrideVirtualMethod (gtype, "change_background", ChangeBackgroundCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PanelApplet), ConnectionMethod="OverrideChangeBackground")]
		protected virtual void OnChangeBackground (BackgroundType type, Gdk.Color color, Gdk.Pixmap pixmap)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (type);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (color);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (pixmap);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("change_background")]
		public event ChangeBackgroundHandler ChangeBackground {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["change_background"] == null)
						BeforeSignals["change_background"] = new PanelAppletSharp.voidObjectBackgroundTypeColorObjectSignal(this, "change_background", value, System.Type.GetType("PanelApplet.ChangeBackgroundArgs,panelapplet-sharp"), 0);
					else
						((GLib.SignalCallback) BeforeSignals ["change_background"]).AddDelegate (value);
					BeforeHandlers.AddHandler("change_background", value);
				} else {
					if (AfterHandlers["change_background"] == null)
						AfterSignals["change_background"] = new PanelAppletSharp.voidObjectBackgroundTypeColorObjectSignal(this, "change_background", value, System.Type.GetType("PanelApplet.ChangeBackgroundArgs,panelapplet-sharp"), 1);
					else
						((GLib.SignalCallback) AfterSignals ["change_background"]).AddDelegate (value);
					AfterHandlers.AddHandler("change_background", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["change_background"] as GLib.SignalCallback;
				event_list.RemoveHandler("change_background", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["change_background"] == null) {
					signals.Remove("change_background");
					cb.Dispose ();
				}
			}
		}

		delegate void MoveFocusOutOfAppletDelegate (IntPtr frame, int direction);

		static MoveFocusOutOfAppletDelegate MoveFocusOutOfAppletCallback;

		static void movefocusoutofapplet_cb (IntPtr frame, int direction)
		{
			PanelApplet obj = GLib.Object.GetObject (frame, false) as PanelApplet;
			obj.OnMoveFocusOutOfApplet ((Gtk.DirectionType)direction);
		}

		private static void OverrideMoveFocusOutOfApplet (GLib.GType gtype)
		{
			if (MoveFocusOutOfAppletCallback == null)
				MoveFocusOutOfAppletCallback = new MoveFocusOutOfAppletDelegate (movefocusoutofapplet_cb);
			OverrideVirtualMethod (gtype, "move_focus_out_of_applet", MoveFocusOutOfAppletCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PanelApplet), ConnectionMethod="OverrideMoveFocusOutOfApplet")]
		protected virtual void OnMoveFocusOutOfApplet (Gtk.DirectionType direction)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (direction);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("move_focus_out_of_applet")]
		public event MoveFocusOutOfAppletHandler MoveFocusOutOfApplet {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["move_focus_out_of_applet"] == null)
						BeforeSignals["move_focus_out_of_applet"] = new PanelAppletSharp.voidObjectDirectionTypeSignal(this, "move_focus_out_of_applet", value, System.Type.GetType("PanelApplet.MoveFocusOutOfAppletArgs,panelapplet-sharp"), 0);
					else
						((GLib.SignalCallback) BeforeSignals ["move_focus_out_of_applet"]).AddDelegate (value);
					BeforeHandlers.AddHandler("move_focus_out_of_applet", value);
				} else {
					if (AfterHandlers["move_focus_out_of_applet"] == null)
						AfterSignals["move_focus_out_of_applet"] = new PanelAppletSharp.voidObjectDirectionTypeSignal(this, "move_focus_out_of_applet", value, System.Type.GetType("PanelApplet.MoveFocusOutOfAppletArgs,panelapplet-sharp"), 1);
					else
						((GLib.SignalCallback) AfterSignals ["move_focus_out_of_applet"]).AddDelegate (value);
					AfterHandlers.AddHandler("move_focus_out_of_applet", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["move_focus_out_of_applet"] as GLib.SignalCallback;
				event_list.RemoveHandler("move_focus_out_of_applet", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["move_focus_out_of_applet"] == null) {
					signals.Remove("move_focus_out_of_applet");
					cb.Dispose ();
				}
			}
		}

		delegate void ChangeSizeDelegate (IntPtr applet, uint size);

		static ChangeSizeDelegate ChangeSizeCallback;

		static void changesize_cb (IntPtr applet, uint size)
		{
			PanelApplet obj = GLib.Object.GetObject (applet, false) as PanelApplet;
			obj.OnChangeSize (size);
		}

		private static void OverrideChangeSize (GLib.GType gtype)
		{
			if (ChangeSizeCallback == null)
				ChangeSizeCallback = new ChangeSizeDelegate (changesize_cb);
			OverrideVirtualMethod (gtype, "change_size", ChangeSizeCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(PanelApplet), ConnectionMethod="OverrideChangeSize")]
		protected virtual void OnChangeSize (uint size)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (size);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
		}

		[GLib.Signal("change_size")]
		public event ChangeSizeHandler ChangeSize {
			add {
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					if (BeforeHandlers["change_size"] == null)
						BeforeSignals["change_size"] = new PanelAppletSharp.voidObjectuintSignal(this, "change_size", value, System.Type.GetType("PanelApplet.ChangeSizeArgs,panelapplet-sharp"), 0);
					else
						((GLib.SignalCallback) BeforeSignals ["change_size"]).AddDelegate (value);
					BeforeHandlers.AddHandler("change_size", value);
				} else {
					if (AfterHandlers["change_size"] == null)
						AfterSignals["change_size"] = new PanelAppletSharp.voidObjectuintSignal(this, "change_size", value, System.Type.GetType("PanelApplet.ChangeSizeArgs,panelapplet-sharp"), 1);
					else
						((GLib.SignalCallback) AfterSignals ["change_size"]).AddDelegate (value);
					AfterHandlers.AddHandler("change_size", value);
				}
			}
			remove {
				System.ComponentModel.EventHandlerList event_list = AfterHandlers;
				Hashtable signals = AfterSignals;
				if (value.Method.GetCustomAttributes(typeof(GLib.ConnectBeforeAttribute), false).Length > 0) {
					event_list = BeforeHandlers;
					signals = BeforeSignals;
				}
				GLib.SignalCallback cb = signals ["change_size"] as GLib.SignalCallback;
				event_list.RemoveHandler("change_size", value);
				if (cb == null)
					return;

				cb.RemoveDelegate (value);

				if (event_list["change_size"] == null) {
					signals.Remove("change_size");
					cb.Dispose ();
				}
			}
		}

		[DllImport("panel-applet-2")]
		static extern void panel_applet_set_size_hints(IntPtr raw, out int size_hints, int n_elements, int base_size);

		public int SetSizeHints(int n_elements, int base_size) {
			int size_hints;
			panel_applet_set_size_hints(Handle, out size_hints, n_elements, base_size);
			return size_hints;
		}

		[DllImport("panel-applet-2")]
		static extern IntPtr panel_applet_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = panel_applet_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("panel-applet-2")]
		static extern unsafe int panel_applet_gconf_get_int(IntPtr raw, string key, out IntPtr opt_error);

		public unsafe int GconfGetInt(string key) {
			IntPtr error = IntPtr.Zero;
			int raw_ret = panel_applet_gconf_get_int(Handle, key, out error);
			int ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe void panel_applet_gconf_set_float(IntPtr raw, string key, double the_float, out IntPtr opt_error);

		public unsafe void GconfSetFloat(string key, double the_float) {
			IntPtr error = IntPtr.Zero;
			panel_applet_gconf_set_float(Handle, key, the_float, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("panel-applet-2")]
		static extern bool panel_applet_get_locked_down(IntPtr raw);

		public bool LockedDown { 
			get {
				bool raw_ret = panel_applet_get_locked_down(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("panel-applet-2")]
		static extern IntPtr panel_applet_get_preferences_key(IntPtr raw);

		public string PreferencesKey { 
			get {
				IntPtr raw_ret = panel_applet_get_preferences_key(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("panel-applet-2")]
		static extern int panel_applet_get_background(IntPtr raw, ref Gdk.Color color, IntPtr pixmap);

		public BackgroundType GetBackground(Gdk.Color color, Gdk.Pixmap pixmap) {
			int raw_ret = panel_applet_get_background(Handle, ref color, pixmap.Handle);
			BackgroundType ret = (BackgroundType)raw_ret;
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe IntPtr panel_applet_gconf_get_string(IntPtr raw, string key, out IntPtr opt_error);

		public unsafe string GconfGetString(string key) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = panel_applet_gconf_get_string(Handle, key, out error);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe void panel_applet_gconf_set_int(IntPtr raw, string key, int the_int, out IntPtr opt_error);

		public unsafe void GconfSetInt(string key, int the_int) {
			IntPtr error = IntPtr.Zero;
			panel_applet_gconf_set_int(Handle, key, the_int, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("panel-applet-2")]
		static extern unsafe void panel_applet_add_preferences(IntPtr raw, string schema_dir, out IntPtr opt_error);

		public unsafe void AddPreferences(string schema_dir) {
			IntPtr error = IntPtr.Zero;
			panel_applet_add_preferences(Handle, schema_dir, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("panel-applet-2")]
		static extern uint panel_applet_get_size(IntPtr raw);

		public uint Size { 
			get {
				uint raw_ret = panel_applet_get_size(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("panel-applet-2")]
		static extern IntPtr panel_applet_gconf_get_full_key(IntPtr raw, string key);

		public string GconfGetFullKey(string key) {
			IntPtr raw_ret = panel_applet_gconf_get_full_key(Handle, key);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe void panel_applet_gconf_set_string(IntPtr raw, string key, string the_string, out IntPtr opt_error);

		public unsafe void GconfSetString(string key, string the_string) {
			IntPtr error = IntPtr.Zero;
			panel_applet_gconf_set_string(Handle, key, the_string, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("panel-applet-2")]
		static extern int panel_applet_get_flags(IntPtr raw);

		[DllImport("panel-applet-2")]
		static extern void panel_applet_set_flags(IntPtr raw, int flags);

		public Flags AppletFlags { 
			get {
				int raw_ret = panel_applet_get_flags(Handle);
				Flags ret = (Flags)raw_ret;
				return ret;
			}
			set {
				panel_applet_set_flags(Handle, (int) value);
			}
		}

		[DllImport("panel-applet-2")]
		static extern unsafe bool panel_applet_gconf_get_bool(IntPtr raw, string key, out IntPtr opt_error);

		public unsafe bool GconfGetBool(string key) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = panel_applet_gconf_get_bool(Handle, key, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe double panel_applet_gconf_get_float(IntPtr raw, string key, out IntPtr opt_error);

		public unsafe double GconfGetFloat(string key) {
			IntPtr error = IntPtr.Zero;
			double raw_ret = panel_applet_gconf_get_float(Handle, key, out error);
			double ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("panel-applet-2")]
		static extern unsafe void panel_applet_gconf_set_bool(IntPtr raw, string key, bool the_bool, out IntPtr opt_error);

		public unsafe void GconfSetBool(string key, bool the_bool) {
			IntPtr error = IntPtr.Zero;
			panel_applet_gconf_set_bool(Handle, key, the_bool, out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}


		static PanelApplet ()
		{
			GtkSharp.PanelappletSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "PanelApplet.custom"
[DllImport ("panel-applet-2")]
static extern void panel_applet_setup_menu (IntPtr handle, string xml, BonoboUIVerb[] items, IntPtr user_data);

public void SetupMenu (string xml, BonoboUIVerb[] items)
{
	BonoboUIVerb[] nulled_items = new BonoboUIVerb[items.Length + 1];
	Array.Copy (items, nulled_items, items.Length);
	nulled_items[items.Length] = new BonoboUIVerb (null, null);
	panel_applet_setup_menu (Handle, xml, nulled_items, IntPtr.Zero);
}

public void SetupMenuFromResource (System.Reflection.Assembly assembly, 
				   string                     resource, 
				   BonoboUIVerb []            items)
{
	if (assembly == null)
		assembly = System.Reflection.Assembly.GetCallingAssembly ();

	System.IO.Stream stream = assembly.GetManifestResourceStream (resource);
	if (stream == null)
		throw new ArgumentException ("resource must be a valid resource " +
					     "name of 'assembly'.");

	System.IO.StreamReader reader = new System.IO.StreamReader (stream);
	string xml_ui = reader.ReadToEnd ();

	SetupMenu (xml_ui, items);
}

[DllImport ("panel-applet-2")]
static extern void panel_applet_setup_menu_from_file (IntPtr          handle,
						      string          opt_datadir,
						      string          filename,
						      string          opt_appname,
						      BonoboUIVerb [] verbs,
						      IntPtr          user_data);

public void SetupMenuFromFile (string          opt_datadir,
			       string          filename,
			       string          opt_appname,
			       BonoboUIVerb [] items)
{
	BonoboUIVerb[] nulled_items = new BonoboUIVerb[items.Length + 1];
	Array.Copy (items, nulled_items, items.Length);
	nulled_items[items.Length] = new BonoboUIVerb (null, null);

	panel_applet_setup_menu_from_file (Handle, 
					   opt_datadir, 
					   filename, 
					   opt_appname, 
					   nulled_items, 
					   IntPtr.Zero);
}

public abstract void Creation ();

public abstract string IID {
	get;
}

public abstract string FactoryIID {
	get;
}

#endregion
	}
}
