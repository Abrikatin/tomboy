// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace PanelAppletSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	internal delegate bool FactoryCallbackNative(IntPtr applet, string iid, IntPtr user_data);

	internal class FactoryCallbackWrapper : GLib.DelegateWrapper {
		static bool _dummy;

		public bool NativeCallback (IntPtr applet, string iid, IntPtr user_data)
		{
			PanelApplet.PanelApplet _arg0 = (PanelApplet.PanelApplet) GLib.Object.GetObject(applet);
			string _arg1 = iid;
			return (bool) _managed ( _arg0,  _arg1);
		}

		internal FactoryCallbackNative NativeDelegate;
		protected PanelApplet.FactoryCallback _managed;

		public FactoryCallbackWrapper (PanelApplet.FactoryCallback managed, object o) : base (o)
		{
			NativeDelegate = new FactoryCallbackNative (NativeCallback);
			_managed = managed;
		}
	}
#endregion


#region Autogenerated code
	internal delegate void voidObjectBackgroundTypeColorObjectDelegate(IntPtr arg0, int arg1, ref Gdk.Color arg2, IntPtr arg3, int key);

	internal class voidObjectBackgroundTypeColorObjectSignal : GLib.SignalCallback {

		private static voidObjectBackgroundTypeColorObjectDelegate _Delegate;

		private static void voidObjectBackgroundTypeColorObjectCallback(IntPtr arg0, int arg1, ref Gdk.Color arg2, IntPtr arg3, int key)
		{
			if (!_Instances.Contains(key))
				throw new Exception("Unexpected signal key " + key);

			voidObjectBackgroundTypeColorObjectSignal inst = (voidObjectBackgroundTypeColorObjectSignal) _Instances[key];
			GLib.SignalArgs args = (GLib.SignalArgs) Activator.CreateInstance (typeof(PanelApplet.ChangeBackgroundArgs));
			args.Args = new object[3];
			args.Args[0] = (PanelApplet.BackgroundType)arg1;
			if ((PanelApplet.BackgroundType)arg1 == PanelApplet.BackgroundType.ColorBackground)
				args.Args[1] = (object) arg2;
			if (arg3 == IntPtr.Zero)
				args.Args[2] = null;
			else {
				args.Args[2] = GLib.Object.GetObject(arg3);
			}
			object[] argv = new object[2];
			argv[0] = inst._obj;
			argv[1] = args;
			inst._handler.DynamicInvoke(argv);
		}

		public voidObjectBackgroundTypeColorObjectSignal(GLib.Object obj, string name, Delegate eh, Type argstype, int connect_flags) : base(obj, eh, argstype)
		{
			if (_Delegate == null) {
				_Delegate = new voidObjectBackgroundTypeColorObjectDelegate(voidObjectBackgroundTypeColorObjectCallback);
			}
			Connect (name, _Delegate, connect_flags);
		}

		protected override void Dispose (bool disposing)
		{
			_Instances.Remove(_key);
			if(_Instances.Count == 0)
				_Delegate = null;

			Disconnect ();
			base.Dispose (disposing);
		}
	}
#endregion


#region Autogenerated code
	internal delegate void voidObjectuintDelegate(IntPtr arg0, uint arg1, int key);

	internal class voidObjectuintSignal : GLib.SignalCallback {

		private static voidObjectuintDelegate _Delegate;

		private static void voidObjectuintCallback(IntPtr arg0, uint arg1, int key)
		{
			if (!_Instances.Contains(key))
				throw new Exception("Unexpected signal key " + key);

			voidObjectuintSignal inst = (voidObjectuintSignal) _Instances[key];
			GLib.SignalArgs args = (GLib.SignalArgs) Activator.CreateInstance (inst._argstype);
			args.Args = new object[1];
			args.Args[0] = arg1;
			object[] argv = new object[2];
			argv[0] = inst._obj;
			argv[1] = args;
			inst._handler.DynamicInvoke(argv);
		}

		public voidObjectuintSignal(GLib.Object obj, string name, Delegate eh, Type argstype, int connect_flags) : base(obj, eh, argstype)
		{
			if (_Delegate == null) {
				_Delegate = new voidObjectuintDelegate(voidObjectuintCallback);
			}
			Connect (name, _Delegate, connect_flags);
		}

		protected override void Dispose (bool disposing)
		{
			_Instances.Remove(_key);
			if(_Instances.Count == 0)
				_Delegate = null;

			Disconnect ();
			base.Dispose (disposing);
		}
	}
#endregion


#region Autogenerated code
	internal delegate void voidObjectDirectionTypeDelegate(IntPtr arg0, int arg1, int key);

	internal class voidObjectDirectionTypeSignal : GLib.SignalCallback {

		private static voidObjectDirectionTypeDelegate _Delegate;

		private static void voidObjectDirectionTypeCallback(IntPtr arg0, int arg1, int key)
		{
			if (!_Instances.Contains(key))
				throw new Exception("Unexpected signal key " + key);

			voidObjectDirectionTypeSignal inst = (voidObjectDirectionTypeSignal) _Instances[key];
			GLib.SignalArgs args = (GLib.SignalArgs) Activator.CreateInstance (inst._argstype);
			args.Args = new object[1];
			args.Args[0] = (Gtk.DirectionType)arg1;
			object[] argv = new object[2];
			argv[0] = inst._obj;
			argv[1] = args;
			inst._handler.DynamicInvoke(argv);
		}

		public voidObjectDirectionTypeSignal(GLib.Object obj, string name, Delegate eh, Type argstype, int connect_flags) : base(obj, eh, argstype)
		{
			if (_Delegate == null) {
				_Delegate = new voidObjectDirectionTypeDelegate(voidObjectDirectionTypeCallback);
			}
			Connect (name, _Delegate, connect_flags);
		}

		protected override void Dispose (bool disposing)
		{
			_Instances.Remove(_key);
			if(_Instances.Count == 0)
				_Delegate = null;

			Disconnect ();
			base.Dispose (disposing);
		}
	}
#endregion

}
